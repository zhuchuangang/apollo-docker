server:
  port: 8888


app:
  id: 6666

apollo:
  meta: http://127.0.0.1:8080

spring:
  application:
    name: apollo-client-demo

# mybatis配置
mybatis-plus:
  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml
  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml
  #  mapper-locations: classpath:/mapper/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.szss.apollo.demo.domain
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 0
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 2
    #驼峰下划线转换
    db-column-underline: true
    #刷新mapper 调试神器
    #refresh-mapper: true
    #数据库大写下划线转换
    capital-mode: true
    # Sequence序列接口实现类配置
    #key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator
    #逻辑删除配置（下面3个配置）
    logic-delete-value: 1
    logic-not-delete-value: 0
    sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
    #自定义填充策略接口实现
    #meta-object-handler: com.baomidou.springboot.MyMetaObjectHandler
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    #配置JdbcTypeForNull
    jdbc-type-for-null: 'null'


# eureka配置
eureka:
  instance:
    leaseRenewalIntervalInSeconds: 10
    prefer-ip-address: true
    metadata-map:
      #      user.name: ${security.user.name}
      #      user.password: ${security.user.password}
      #     配置说明：http://codecentric.github.io/spring-boot-admin/1.5.7/#_converting_serviceinstances_into_monitored_applications
      management.context-path: /mgmt
      health.path: /mgmt/health
      instanceId: ${spring.application.name}:${random.value}
  client:
    registryFetchIntervalSeconds: 5
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://127.0.0.1:8080/eureka/
    enabled: true
